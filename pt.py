import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import IsolationForest, RandomForestRegressor
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from prophet import Prophet
from sklearn.metrics import mean_squared_error

# Configuraci칩n inicial
st.set_page_config(page_title="Control de Recursos - PT", layout="wide")

# T칤tulo principal del dashboard
st.title("游늵 Dashboard de Control de Recursos - Partido del Trabajo (PT)")
st.markdown("""
**Bienvenidos al sistema de control de recursos del PT.**  
Este dashboard permite analizar flujos de costos, identificar anomal칤as y optimizar la distribuci칩n de los recursos con modelos avanzados de Machine Learning.  
- **Objetivo:** Preparar una estructura financiera s칩lida para la campa침a electoral 2027.  
- **Capacidades principales:**
    - Detecci칩n de anomal칤as en gastos.
    - Predicci칩n de flujos de recursos.
    - Clustering y segmentaci칩n de gastos.
    - Miner칤a de procesos.
""")

# Funci칩n para generar datos simulados
@st.cache_data
def generar_datos():
    np.random.seed(42)
    categorias = ["Salarios", "Propaganda", "Capacitaci칩n", "Log칤stica", "Publicidad Digital"]
    meses = np.arange(1, 13)
    data = pd.DataFrame({
        "Categor칤a": np.random.choice(categorias, 500),
        "Mes": np.random.choice(meses, 500),
        "Gasto ($)": np.abs(np.random.normal(30000, 15000, 500)),
        "A침o": np.random.choice([2022, 2023, 2024], 500),
    })
    return data

# Carga de datos
data = generar_datos()

# Barra lateral para filtros
st.sidebar.title("Filtros")
categorias_filtradas = st.sidebar.multiselect("Selecciona categor칤as", data["Categor칤a"].unique(), default=data["Categor칤a"].unique())
anios_filtrados = st.sidebar.multiselect("Selecciona a침os", data["A침o"].unique(), default=data["A침o"].unique())

# Filtrar datos seg칰n la selecci칩n del usuario
data_filtrada = data[(data["Categor칤a"].isin(categorias_filtradas)) & (data["A침o"].isin(anios_filtrados))]

# Verificar si hay datos filtrados
if data_filtrada.empty:
    st.warning("No hay datos disponibles con los filtros seleccionados.")
else:
    # Pesta침as principales
    tabs = st.tabs(["游늵 An치lisis General", "游댍 Detecci칩n de Anomal칤as", "游닍 Clustering", "游닄 Predicciones Temporales", "游깷 PCA y Segmentaci칩n"])

    # --- Pesta침a: An치lisis General ---
    with tabs[0]:
        st.header("游늵 An치lisis General")
        col1, col2 = st.columns(2)

        # Gr치fico 1: Gasto total por categor칤a
        gasto_categoria = data_filtrada.groupby("Categor칤a")["Gasto ($)"].sum().reset_index()
        fig1 = px.bar(gasto_categoria, x="Categor칤a", y="Gasto ($)", title="Gasto Total por Categor칤a", text_auto='.2s')
        col1.plotly_chart(fig1, use_container_width=True)

        # Gr치fico 2: Gasto mensual promedio
        gasto_mes = data_filtrada.groupby("Mes")["Gasto ($)"].mean().reset_index()
        fig2 = px.line(gasto_mes, x="Mes", y="Gasto ($)", title="Promedio de Gasto Mensual", markers=True)
        col2.plotly_chart(fig2, use_container_width=True)

    # --- Pesta침a: Detecci칩n de Anomal칤as ---
    with tabs[1]:
        st.header("游댍 Detecci칩n de Anomal칤as con Isolation Forest")
        st.markdown("""
        Este modelo utiliza t칠cnicas no supervisadas para detectar transacciones inusuales que podr칤an indicar desviaciones o errores en la gesti칩n.
        """)

        # Modelo de Isolation Forest
        iforest = IsolationForest(contamination=0.05, random_state=42)
        data_filtrada["Anomal칤a"] = iforest.fit_predict(data_filtrada[["Gasto ($)"]])
        anomal칤as = data_filtrada[data_filtrada["Anomal칤a"] == -1]

        if not anomal칤as.empty:
            fig3 = px.scatter(anomal칤as, x="Mes", y="Gasto ($)", color="Categor칤a", title="Anomal칤as Detectadas")
            st.plotly_chart(fig3, use_container_width=True)
        else:
            st.success("No se detectaron anomal칤as en los datos seleccionados.")

    # --- Pesta침a: Clustering ---
    with tabs[2]:
        st.header("游닍 Clustering de Gastos")
        st.markdown("""
        **K-Means** agrupa los datos en clusters seg칰n patrones de gasto. Esto ayuda a entender c칩mo se distribuyen los recursos.
        """)

        kmeans = KMeans(n_clusters=3, random_state=42)
        data_filtrada["Cluster"] = kmeans.fit_predict(data_filtrada[["Gasto ($)"]])

        fig4 = px.scatter(data_filtrada, x="Mes", y="Gasto ($)", color="Cluster", title="Clustering de Gasto", hover_data=["Categor칤a"])
        st.plotly_chart(fig4, use_container_width=True)

    # --- Pesta침a: Predicciones Temporales ---
    with tabs[3]:
        st.header("游닄 Predicciones de Gasto")
        st.markdown("""
        Usando **Prophet**, predecimos los patrones de gasto futuros para una mejor planificaci칩n de los recursos.
        """)

        df_prophet = data_filtrada.groupby("Mes")["Gasto ($)"].sum().reset_index()
        df_prophet.columns = ["ds", "y"]

        model = Prophet()
        model.fit(df_prophet)
        future = model.make_future_dataframe(periods=12, freq="M")
        forecast = model.predict(future)

        fig5 = px.line(forecast, x="ds", y=["yhat", "yhat_lower", "yhat_upper"], title="Predicci칩n de Gasto Mensual")
        st.plotly_chart(fig5, use_container_width=True)

    # --- Pesta침a: PCA y Segmentaci칩n ---
    with tabs[4]:
        st.header("游깷 An치lisis PCA")
        st.markdown("""
        Utilizamos **PCA (An치lisis de Componentes Principales)** para reducir la dimensionalidad y facilitar la visualizaci칩n de los datos.
        """)

        pca = PCA(n_components=2)
        componentes = pca.fit_transform(data_filtrada[["Mes", "Gasto ($)"]])

        fig6 = px.scatter(x=componentes[:, 0], y=componentes[:, 1], color=data_filtrada["Categor칤a"], title="Reducci칩n de Dimensiones con PCA")
        st.plotly_chart(fig6, use_container_width=True)
