import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.ensemble import IsolationForest
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.datasets import make_classification
from sklearn.metrics import mean_squared_error

# Configuraci√≥n inicial
st.set_page_config(
    page_title="Optimizaci√≥n de Recursos 2027",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Tema de colores
st.markdown("""
<style>
    .block-container { padding: 1.5rem 2rem; }
    h1, h2, h3 { color: #205375; font-weight: bold; }
    .stButton>button { background-color: #205375; color: white; border-radius: 5px; }
    .stButton>button:hover { background-color: #1E90FF; }
    .css-18e3th9 { background-color: #F4F4F4; }
    .css-1d391kg { color: #333333; }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.title("üéõÔ∏è Dashboard de Optimizaci√≥n de Recursos para 2027")
st.subheader("Automatizaci√≥n, Eficiencia y Detecci√≥n de Anomal√≠as")
st.markdown("""
**Objetivo:** Reducir p√©rdidas, detectar desviaciones en los fondos y optimizar los recursos financieros y de inventarios.  
Esta herramienta est√° dise√±ada para maximizar el impacto de los recursos en campa√±as electorales y mejorar la transparencia.
""")

# Carga de datos simulados con opciones interactivas
@st.cache_data
def load_data(custom_size):
    np.random.seed(42)
    categories = [
        "Salarios", "Administraci√≥n", "Gastos M√©dicos", 
        "Limpieza", "Propaganda", "Capacitaci√≥n"
    ]
    data = {
        "Categor√≠a": np.random.choice(categories, custom_size),
        "Mes": np.random.choice(range(1, 13), custom_size),
        "Gasto ($)": np.random.randint(5000, 60000, custom_size),
        "A√±o": np.random.choice([2022, 2023, 2024], custom_size),
    }
    return pd.DataFrame(data)

# Elementos interactivos: Slider para el tama√±o de los datos
with st.sidebar:
    st.header("üîß Configuraci√≥n")
    data_size = st.slider("Tama√±o de los datos simulados:", min_value=100, max_value=1000, step=100, value=500)
    filtro_categoria = st.multiselect("Seleccionar Categor√≠as", ["Salarios", "Administraci√≥n", "Gastos M√©dicos", "Limpieza", "Propaganda", "Capacitaci√≥n"], default=["Salarios", "Administraci√≥n"])
    filtro_a√±o = st.multiselect("Seleccionar A√±os", [2022, 2023, 2024], default=[2022, 2023])

# Carga de datos y filtros
data = load_data(data_size)
data_filtrada = data[data["Categor√≠a"].isin(filtro_categoria) & data["A√±o"].isin(filtro_a√±o)]

# Verificar si hay datos filtrados
if data_filtrada.empty:
    st.warning("No hay datos disponibles para los filtros seleccionados.")
else:
    tabs = st.tabs([
        "üìä An√°lisis General", 
        "üîé Detecci√≥n de Anomal√≠as", 
        "üì¶ Optimizaci√≥n de Inventarios", 
        "üìö Predicciones de Gasto", 
        "üåê Miner√≠a de Procesos",
        "ü§ñ Explicaci√≥n de Modelos ML"
    ])

    # --- Pesta√±a 1: An√°lisis General ---
    with tabs[0]:
        st.header("üìä An√°lisis General de Recursos")
        fig1 = px.bar(
            data_filtrada.groupby("Categor√≠a")["Gasto ($)"].sum().reset_index(),
            x="Categor√≠a", y="Gasto ($)", color="Categor√≠a",
            title="Gasto Total por Categor√≠a", color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig1, use_container_width=True)

        fig2 = px.line(
            data_filtrada.groupby("Mes")["Gasto ($)"].sum().reset_index(),
            x="Mes", y="Gasto ($)", title="Tendencia Mensual del Gasto",
            markers=True, line_shape="spline", color_discrete_sequence=["#636EFA"]
        )
        st.plotly_chart(fig2, use_container_width=True)

    # --- Pesta√±a 2: Detecci√≥n de Anomal√≠as ---
    with tabs[1]:
        st.header("üîé Detecci√≥n de Anomal√≠as")
        iforest = IsolationForest(contamination=0.05, random_state=42)
        if not data_filtrada[["Gasto ($)"]].empty:
            data_filtrada["Anomal√≠a"] = iforest.fit_predict(data_filtrada[["Gasto ($)"]])
            anomal√≠as = data_filtrada[data_filtrada["Anomal√≠a"] == -1]
            st.write(f"Se detectaron {len(anomal√≠as)} anomal√≠as:")
            st.dataframe(anomal√≠as)

            fig_anomal√≠as = px.scatter(
                anomal√≠as, x="Mes", y="Gasto ($)", color="Categor√≠a",
                title="Transacciones Sospechosas Detectadas",
                size="Gasto ($)", color_discrete_sequence=px.colors.qualitative.Bold
            )
            st.plotly_chart(fig_anomal√≠as, use_container_width=True)

    # --- Pesta√±a 3: Optimizaci√≥n de Inventarios ---
    with tabs[2]:
        st.header("üì¶ Optimizaci√≥n de Inventarios")
        kmeans = KMeans(n_clusters=3, random_state=42)
        data_filtrada["Cluster"] = kmeans.fit_predict(data_filtrada[["Gasto ($)"]])
        fig_kmeans = px.scatter(
            data_filtrada, x="Mes", y="Gasto ($)", color="Cluster",
            title="Agrupamiento de Gastos por Inventario",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fig_kmeans, use_container_width=True)

    # --- Pesta√±a 4: Predicciones de Gasto ---
    with tabs[3]:
        st.header("üìö Predicciones de Gasto")
        lr = LinearRegression()
        X = data_filtrada[["Mes"]]
        y = data_filtrada["Gasto ($)"]
        if not X.empty:
            lr.fit(X, y)
            data_filtrada["Predicci√≥n ($)"] = lr.predict(X)
            fig_pred = px.line(
                data_filtrada, x="Mes", y="Predicci√≥n ($)", color="Categor√≠a",
                title="Predicciones de Gasto Mensual",
                markers=True, line_shape="spline", color_discrete_sequence=px.colors.qualitative.Vivid
            )
            st.plotly_chart(fig_pred, use_container_width=True)

# --- Pesta√±a 5: Miner√≠a de Procesos ---
with tabs[4]:
    st.header("üåê Miner√≠a de Procesos")
    st.markdown("""
    **Miner√≠a de procesos aplicada al contexto pol√≠tico:**
    La miner√≠a de procesos permite analizar c√≥mo se llevan a cabo las actividades dentro de las operaciones de un partido pol√≠tico. 
    Es especialmente √∫til para identificar cuellos de botella, gastos innecesarios y rutas de optimizaci√≥n en procesos log√≠sticos como la entrega de propaganda, organizaci√≥n de m√≠tines y distribuci√≥n de recursos.

    **¬øC√≥mo funciona?**
    - **Input:** Registros de eventos (logs) con informaci√≥n de tiempo, actividad y responsable.  
    - **T√©cnicas principales:**  
        - **Modelado de procesos:** Representar visualmente el flujo de actividades mediante diagramas.  
        - **Descubrimiento:** Identificar patrones comunes en los datos para entender c√≥mo fluyen las actividades.
        - **Conformidad:** Comparar procesos reales con los ideales para identificar desviaciones.  

    **Ejemplo en campa√±as pol√≠ticas:**
    - Analizar los registros de distribuci√≥n de recursos a diferentes regiones.
    - Detectar demoras en la entrega de propaganda o fondos.  
    - Optimizar los tiempos de respuesta en la organizaci√≥n de eventos.  

    **Casos de √©xito internacionales:**
    - **Brasil:** Implement√≥ miner√≠a de procesos en programas sociales y campa√±as, identificando demoras sistem√°ticas en la entrega de recursos y eliminando procesos redundantes. Esto les permiti√≥ ahorrar hasta un 15% del presupuesto operativo.  
    - **Estados Unidos:** Partidos pol√≠ticos usaron miner√≠a de procesos para optimizar la asignaci√≥n de voluntarios y publicidad, reduciendo en un 10% los tiempos operativos de campa√±a.  
    - **Espa√±a:** Mejor√≥ en un 20% la eficiencia de las campa√±as sociales y redujo los costos de impresi√≥n al identificar procesos innecesarios en la entrega de propaganda.

    **Visualizaci√≥n de procesos:**
    Abajo se muestra un ejemplo de c√≥mo podr√≠a lucir un flujo de actividades en un partido pol√≠tico:
    """)
    
    # Mostrar diagrama representativo de miner√≠a de procesos
    st.image(
        "https://miro.medium.com/max/1400/1*X47Jl9zwmDRQz-Z1knG0gg.png",
        caption="Ejemplo de Flujo de Procesos en un Partido Pol√≠tico",
        use_column_width=True
    )

    st.markdown("""
    **Beneficios clave:**
    - **Transparencia:** Documentar y justificar c√≥mo se utilizan los recursos.  
    - **Eficiencia:** Reducir tiempos y costos en actividades clave.  
    - **Optimizaci√≥n:** Ajustar procesos log√≠sticos para maximizar el impacto electoral.
    """)

# --- Pesta√±a 6: Explicaci√≥n de Modelos de Machine Learning ---
with tabs[5]:
    st.header("ü§ñ Modelos de Machine Learning: Explicaci√≥n")
    st.markdown("""
    **Modelos aplicados al contexto pol√≠tico:**

    **1. Isolation Forest (Bosque de Aislamiento):**  
    - **¬øQu√© hace?** Detecta gastos inusuales en presupuestos o desviaciones sospechosas en el financiamiento.  
    - **Ejemplo:** Identificaci√≥n de pagos inesperados en regiones clave durante campa√±as.  
    - **Base matem√°tica:**  
      - A√≠sla puntos de datos generando particiones aleatorias en los conjuntos de datos.  
      - La m√©trica principal es la **profundidad del √°rbol**: los gastos m√°s f√°ciles de aislar (menor profundidad) son considerados an√≥malos.
      - F√≥rmula del puntaje de anomal√≠a:  
        \\[
        s(x) = 2^{-E(h(x)) / c(n)}
        \\]  
        donde \\(E(h(x))\\) es la profundidad promedio, y \\(c(n)\\) es el n√∫mero esperado de divisiones para un conjunto de tama√±o \\(n\\).
    - **Empresas y casos relevantes:**  
      - **PayPal:** Monitoreo de fraudes financieros.  
      - **INE M√©xico:** Potencial uso para detectar irregularidades en campa√±as.
    - **Caso de √©xito:**  
      - **Brasil:** Implement√≥ modelos de detecci√≥n de fraude basados en machine learning, ahorrando el 18% del presupuesto de campa√±as y programas sociales al identificar transacciones irregulares en 2022.

    **2. KMeans:**  
    - **¬øQu√© hace?** Agrupa gastos o regiones seg√∫n patrones comunes, optimizando la asignaci√≥n de recursos.  
    - **Ejemplo:** Segmentaci√≥n de zonas con mayor impacto pol√≠tico basado en inversi√≥n en propaganda y resultados hist√≥ricos.  
    - **Base matem√°tica:**  
      - Minimiza la suma de las distancias al centro del cl√∫ster:  
        \\[
        J = \\sum_{i=1}^{k} \\sum_{j=1}^{n} ||x_j - \\mu_i||^2
        \\]  
        donde \\(\\mu_i\\) es el centroide del cl√∫ster.
    - **Caso de √©xito:**  
      - **India:** Utiliz√≥ KMeans para segmentar los gastos de campa√±a seg√∫n las necesidades demogr√°ficas, logrando reducir un 25% los costos operativos al identificar regiones de baja prioridad.

    **3. Regresi√≥n Lineal:**  
    - **¬øQu√© hace?** Predice el gasto futuro o el impacto pol√≠tico en funci√≥n de datos hist√≥ricos.  
    - **Ejemplo:** Estimaci√≥n del gasto necesario en regiones espec√≠ficas para aumentar el alcance de votantes.  
    - **Base matem√°tica:**  
      - Modelo lineal:  
        \\[
        y = \\beta_0 + \\beta_1x_1 + \\dots + \\beta_px_p + \\epsilon
        \\]  
        donde \\(\\beta_i\\) son los coeficientes del modelo y \\(\\epsilon\\) es el error.
    - **Caso de √©xito:**  
      - **Canad√°:** Predijo los costos asociados con campa√±as publicitarias en medios digitales, logrando ajustar presupuestos en tiempo real y reducir desperdicios en un 12%.

    **Beneficios clave para partidos pol√≠ticos:**
    - **Transparencia:** Justificaci√≥n del uso de recursos para evitar sanciones.  
    - **Optimizaci√≥n:** Asignaci√≥n eficiente de recursos a zonas prioritarias.  
    - **Impacto electoral:** Identificaci√≥n de regiones clave para maximizar alcance con recursos limitados.
    """)
